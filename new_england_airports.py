# -*- coding: utf-8 -*-
"""new_england_airports

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LXUhsqnlCNPWvvBFuST2tkEMbh7pAny_
"""

!pip install pandas numpy matplotlib seaborn streamlit pydeck

!pip install streamlit

import pandas as pd
import numpy as np
import streamlit as st
import pydeck as pdk
import seaborn as sns
import matplotlib.pyplot as plt

# [DA1] Clean the data
@st.cache
def load_data():
    try:
        data = pd.read_csv('/content/new_england_airports.csv', encoding='utf-8')
        data.dropna(inplace=True)  # Example of cleaning data
        data['latitude_deg'] = data['latitude_deg'].apply(pd.to_numeric, errors='coerce')
        data['longitude_deg'] = data['longitude_deg'].apply(pd.to_numeric, errors='coerce')
        data.dropna(inplace=True)
        return data
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

df = load_data()

# Add a title and description
st.title('New England Airports')
st.write("""
This application provides interactive visualizations of the New England Airports dataset.
Use the widgets in the sidebar to explore different aspects of the data.
""")

# Sidebar widgets
st.sidebar.header('Filters')
state = st.sidebar.multiselect('State', df['iso_region'].unique(), default=df['iso_region'].unique())
airport_type = st.sidebar.selectbox('Type', df['type'].unique())
latitude_range = st.sidebar.slider('Latitude Range', float(df['latitude_deg'].min()), float(df['latitude_deg'].max()), (float(df['latitude_deg'].min()), float(df['latitude_deg'].max())))
longitude_range = st.sidebar.slider('Longitude Range', float(df['longitude_deg'].min()), float(df['longitude_deg'].max()), (float(df['longitude_deg'].min()), float(df['longitude_deg'].max())))

# Filter data based on user selection
filtered_data = df[(df['iso_region'].isin(state)) &
                   (df['type'] == airport_type) &
                   (df['latitude_deg'] >= latitude_range[0]) &
                   (df['latitude_deg'] <= latitude_range[1]) &
                   (df['longitude_deg'] >= longitude_range[0]) &
                   (df['longitude_deg'] <= longitude_range[1])]

# Display the filtered data
st.write(f'Total records: {filtered_data.shape[0]}')
st.write(filtered_data)

# Python Features
def process_data(df, default_value='General'):
    df['name'] = df['name'].fillna(default_value)
    return df

df = process_data(df)
df = process_data(df, default_value='Unknown')

def get_summary_stats(df):
    return df.describe().T

summary_stats = get_summary_stats(filtered_data)
st.write(summary_stats)

# List comprehension
airport_ids = [airport_id for airport_id in df['id'] if not pd.isnull(airport_id)]
if airport_ids:
    # Dictionary access example
    airport_dict = df.set_index('id').to_dict('index')
    st.write(f"Example airport details: {airport_dict.get(airport_ids[0], {})}")
else:
    st.write("No valid airport IDs found.")

# Visualizations
st.header('Visualizations')

# Bar chart for airport types
st.subheader('Airport Types')
type_counts = filtered_data['type'].value_counts()
fig1, ax1 = plt.subplots()
ax1.barh(type_counts.index, type_counts.values, color='skyblue')
ax1.set_xlabel('Number of Airports')
ax1.set_ylabel('Type')
ax1.set_title('Distribution of Airport Types')
st.pyplot(fig1)

# Map visualization
st.subheader('Airport Locations')
st.map(filtered_data[['latitude_deg', 'longitude_deg']])

# Enhanced PyDeck map with tooltips
st.subheader('Enhanced PyDeck Map')
layer = pdk.Layer(
    'ScatterplotLayer',
    data=filtered_data,
    get_position='[longitude_deg, latitude_deg]',
    get_fill_color='[200, 30, 0, 160]',
    get_radius=200,
    pickable=True,
    auto_highlight=True,
    tooltip=True
)
deck = pdk.Deck(layers=[layer], initial_view_state=pdk.ViewState(latitude=filtered_data['latitude_deg'].mean(), longitude=filtered_data['longitude_deg'].mean(), zoom=10))
st.pydeck_chart(deck)

# Scatter plot for latitude and longitude
st.subheader('Latitude vs Longitude')
fig2, ax2 = plt.subplots()
ax2.scatter(filtered_data['longitude_deg'], filtered_data['latitude_deg'], alpha=0.5, c='green')
ax2.set_xlabel('Longitude')
ax2.set_ylabel('Latitude')
ax2.set_title('Scatter Plot of Latitude vs Longitude')
st.pyplot(fig2)

# Seaborn pairplot
st.subheader('Pairplot')
fig4 = sns.pairplot(df[['latitude_deg', 'longitude_deg', 'elevation_ft']])
st.pyplot(fig4)

# Data analysis
st.header('Data Analysis')

# [DA3] Find Top 5 airports with the highest elevation
st.subheader('Top 5 Airports with Highest Elevation')
top_elevation = df.nlargest(5, 'elevation_ft')
st.write(top_elevation)

# [DA7] Add a new column for state-country combination
df['state_country'] = df['iso_region'] + ', ' + df['iso_country']
st.subheader('State-Country Combinations')
st.write(df[['state_country', 'name']].head())

# [DA3] Get top 5 types
st.subheader('Top 5 Airport Types')
top_types = df['type'].value_counts().head(5)
st.write(top_types)

# Correlation heatmap
st.subheader('Correlation Heatmap')
correlation = df.corr()
fig3, ax3 = plt.subplots()
sns.heatmap(correlation, annot=True, ax=ax3, cmap='coolwarm')
ax3.set_title('Correlation Heatmap')
st.pyplot(fig3)

# Replace experimental_data_editor with regular dataframe display
st.subheader('Data Table')
st.dataframe(filtered_data)

streamlit run new_england_airports.py